---
import Layout from "../../../layouts/Layout.astro";
import { supabase } from "../../../lib/supabase";
import CardActions from "../../../components/CardActions.tsx";


export async function getStaticPaths() {
  const { data: sets, error } = await supabase
    .from('sets')
    .select('code')
    .eq('game_id', 'bd6b0e9f-e292-4ac0-b0e6-d8b9886f4d3d');

  if (error) {
    console.error('Error fetching Digimon sets for static paths:', error);
    return [];
  }

  return sets.map((set) => ({
    params: { setCode: set.code },
  }));
}

const { setCode } = Astro.params;

let set;
let userId: string | null = null;
let isSignedIn: boolean = false;
let baseCardsWithVersions: { baseCard: any; versions: any[] }[] | undefined;
let userCardQuantities: Record<string, number> = {};

if (setCode) {
  const { data: { session } } = await supabase.auth.getSession();
  userId = session?.user?.id || null;
  isSignedIn = !!session?.user;

  const { data: selectedSet, error: setError } = await supabase
    .from('sets')
    .select('*')
    .eq('code', setCode)
    .single();

  if (setError) {
    console.error('Error fetching set:', setError);
  } else {
    set = selectedSet;

    let baseCards = [];
    const { data: fetchedBaseCards, error: baseCardsError } = await supabase
      .from('base_cards')
      .select('*')
      .eq('set', set.code);

    if (baseCardsError) {
      console.error('Error fetching base cards:', baseCardsError);
    } else {
      baseCards = fetchedBaseCards || [];
    }

    const { data: allCards, error: allCardsError } = await supabase
      .from('cards')
      .select('id, base_cards(number, name, type), version, rarity, img_url')
      .in(
        'base_number',
        baseCards.map((bc) => bc.number)
      );

    if (allCardsError) {
      console.error('Error fetching all cards:', allCardsError);
    } else {
      const groupedCards = baseCards.map((baseCard) => ({
        baseCard,
        versions: allCards.filter(
          (card) => card.base_cards?.number === baseCard.number
        ),
      }));
      baseCardsWithVersions = groupedCards;

      if (userId) {
        const cardIdsInSet = allCards.map(card => card.id);
        const { data: userCardsData, error: userCardsError } = await supabase
          .from('user_cards')
          .select('card_id, quantity')
          .eq('user_id', userId)
          .in('card_id', cardIdsInSet);

        if (userCardsError) {
          console.error('Error fetching user cards:', userCardsError);
        } else {
          userCardsData.forEach(userCard => {
            userCardQuantities[userCard.card_id] = userCard.quantity;
          });
        }
      }
    }
  }
}
---



<Layout title={set ? `Digimon TCG - ${set.code}` : 'Digimon TCG - Set Details'}>
  {set ? (
    <>
      <h1>{set.code} - {set.name}</h1>
      <div>
        {isSignedIn ? (
          <p>You are signed in. Your User ID: {userId}</p>
        ) : (
          <p>You are not signed in.</p>
        )}
      </div>

      <h2>Card List</h2>
      {baseCardsWithVersions && baseCardsWithVersions.length > 0 ? (
        <div class="flex flex-col gap-8"> {/* Vertical flex container for base cards */}
          {baseCardsWithVersions.map(({ baseCard, versions }) => (
            <div class="border-black border-2 rounded-md bg-white p-4"> {/* Container for each base card and its variants */}
              <div class="mb-4">
                <a class="text-xl text-gray-700 font-bold border-black border-2 shadow-[8px_8px_0px_rgba(0,0,0,1)] bg-yellow-200">{baseCard.number}</a>
                <a class="text-xl text-gray-700 font-bold border-black border-2 shadow-[8px_8px_0px_rgba(0,0,0,1)] bg-yellow-200">{baseCard.name}</a>
                <a class="text-xl text-gray-700 font-bold border-black border-2 shadow-[8px_8px_0px_rgba(0,0,0,1)] bg-yellow-200">{baseCard.type}</a>
              </div>

              <div class="flex flex-row gap-4 overflow-x-auto pb-4"> {/* Horizontal container for variants */}
                {versions.map((card) => (
                  <div class="w-64 h-auto border-black border-2 rounded-md shadow-[8px_8px_0px_rgba(0,0,0,1)] bg-yellow-200 flex flex-col">
                    <a href={`/set/${setCode}/card/${baseCard.number}`} class="block cursor-pointer">
                      <article class="w-full h-full flex flex-col">
                        <figure class="w-full h-full border-black border-b-2 overflow-hidden">
                          <img
                            src={card.img_url}
                            alt={baseCard.name}
                            class="w-full h-full object-cover"
                          />
                        </figure>
                        <div class="px-4 py-3 text-left">
                          <p class="text-xl text-center">{card.rarity}</p>
                        </div>
                      </article>
                    </a>
                    {isSignedIn && (
                      <div class="px-4 pb-3">
                        <CardActions
                          client:load
                          cardId={card.id}
                          initialQuantity={userCardQuantities[card.id] || 0}
                          userId={userId}
                        />
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>
          ))}
        </div>
      ) : (
        <p>No cards found in this set.</p>
      )}
    </>
  ) : (
    <p>Set not found.</p>
  )}
</Layout>

