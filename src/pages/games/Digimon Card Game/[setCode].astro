---
import { supabase } from "../../../lib/supabase";
import CardActions from "../../../components/CardActions.jsx";

export async function getStaticPaths() {
  const { data: sets, error } = await supabase
    .from('sets')
    .select('code')
    .eq('game_id', 'bd6b0e9f-e292-4ac0-b0e6-d8b9886f4d3d');

  if (error) {
    console.error('Error fetching Digimon sets for static paths:', error);
    return [];
  }

  return sets.map((set) => ({
    params: { setCode: set.code },
  }));
}

const { setCode } = Astro.params;

let set;
let userId: string | null = null;
let isSignedIn: boolean = false;
let baseCardsWithVersions: { baseCard: any; versions: any[] }[] | undefined;
let userCardQuantities: Record<string, number> = {};

if (setCode) {
  const { data: { session } } = await supabase.auth.getSession();
  userId = session?.user?.id || null;
  isSignedIn = !!session?.user;

  const { data: selectedSet, error: setError } = await supabase
    .from('sets')
    .select('*')
    .eq('code', setCode)
    .single();

  if (setError) {
    console.error('Error fetching set:', setError);
  } else {
    set = selectedSet;

    let baseCards = [];
    const { data: fetchedBaseCards, error: baseCardsError } = await supabase
      .from('base_cards')
      .select('*')
      .eq('set', set.code);

    if (baseCardsError) {
      console.error('Error fetching base cards:', baseCardsError);
    } else {
      baseCards = fetchedBaseCards || [];
    }

    const { data: allCards, error: allCardsError } = await supabase
      .from('cards')
      .select('id, base_cards(number, name, type), version, rarity, img_url')
      .in(
        'base_number',
        baseCards.map((bc) => bc.number)
      );

    if (allCardsError) {
      console.error('Error fetching all cards:', allCardsError);
    } else {
      const groupedCards = baseCards.map((baseCard) => ({
        baseCard,
        versions: allCards.filter(
          (card) => card.base_cards?.number === baseCard.number
        ),
      }));
      baseCardsWithVersions = groupedCards;

      if (userId) {
        const cardIdsInSet = allCards.map(card => card.id);
        const { data: userCardsData, error: userCardsError } = await supabase
          .from('user_cards')
          .select('card_id, quantity')
          .eq('user_id', userId)
          .in('card_id', cardIdsInSet);

        if (userCardsError) {
          console.error('Error fetching user cards:', userCardsError);
        } else {
          userCardsData.forEach(userCard => {
            userCardQuantities[userCard.card_id] = userCard.quantity;
          });
        }
      }
    }
  }
}
---

<main title={set ? `Digimon TCG - ${set.code}` : 'Digimon TCG - Set Details'}>
  {set ? (
    <>
      <h1>{set.code} - {set.name}</h1>
      <div>
        {isSignedIn ? (
          <>
            <p>You are signed in.</p>
            <p>Your User ID: {userId}</p>
          </>
        ) : (
          <p>You are not signed in.</p>
        )}
      </div>

      <h2>Card List</h2>
      {baseCardsWithVersions && baseCardsWithVersions.length > 0 ? (
        <div class="card-list-container">
          {baseCardsWithVersions.map(({ baseCard, versions }) => (
            <div class="base-card-row">
              <div class="base-card-info">
                <h3>{baseCard.name}</h3>
                <p>Number: {baseCard.number}</p>
                <p>Type: {baseCard.type}</p>
              </div>
              <div class="variants-container">
                {versions.map((card) => (
                  <div class="variant-card">
                    <img src={card.img_url} alt={card.base_cards?.name} />
                    <p>Rarity: {card.rarity}</p>
                    {card.version && <p>Version: {card.version}</p>}
                    {isSignedIn && (
                      <CardActions
                        client:load
                        cardId={card.id}
                        initialQuantity={userCardQuantities[card.id] || 0}
                        userId={userId}
                      />
                    )}
                  </div>
                ))}
              </div>
            </div>
          ))}
        </div>
      ) : (
        <p>No cards found in this set.</p>
      )}
    </>
  ) : (
    <p>Set not found.</p>
  )}
</main>

<style>
  .card-list-container {
    display: flex;
    flex-direction: column;
    gap: 20px;
    padding: 20px 0;
  }

  .base-card-row {
    display: flex;
    border: 1px solid #ccc;
    border-radius: 8px;
    padding: 15px;
    gap: 20px;
    align-items: flex-start;
  }

  .base-card-info {
    flex-basis: 200px;
  }

  .variants-container {
    display: flex;
    gap: 10px;
    overflow-x: auto; /* Allow horizontal scrolling for variants */
  }

  .variant-card {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    width: 150px; /* Adjust as needed */
  }

  .variant-card img {
    max-width: 100%;
    height: auto;
    border: 1px solid #eee;
    border-radius: 4px;
  }

  .card-actions {
    display: flex;
    gap: 10px;
    align-items: center;
    margin-top: 5px;
  }
</style>